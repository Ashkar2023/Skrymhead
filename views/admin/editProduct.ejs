<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>SKRYMHEAD</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
		crossorigin="anonymous"></script>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css" />
	<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
	<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<style>
		input::-webkit-outer-spin-button,
		input::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}

		#addVariantModal {
			background-color: rgba(255, 255, 255, 0.264);
			backdrop-filter: blur(10px);
		}
	</style>
</head>

<body>

	<nav class=" navbar navbar-expand-lg bg-dark">
		<a class="text-white navbar-brand" href="#" style="padding-left: 15px; font-family: 'Lucida Sans' ">
			<h4><strong>SKRYMHEAD</strong></h4>
		</a>
		<!-- <img src="/public/images/zel_logo.jpg"  width="45" height="45" alt=""> -->
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
			aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" style="padding-right: 15px; margin-right: 10px;"
			id="navbarSupportedContent">
			<ul class="navbar-nav navbar-light ms-auto ">
				<li class="nav-item ">
					<a href="/admin/dashboard" class="m-2" style="text-decoration: none; ">Dashboard
					</a>

				</li>
				<li class="nav-item ">
					<a href="/admin/addproduct" class="m-2" style="text-decoration: none; ">Product</a>

				</li>
				<li class="nav-item">
					<a href="/admin/category" class="m-2" style="text-decoration: none; ">Category
					</a>

				</li>
				<li class="nav-item">
					<a href="/admin/users" class="m-2" style="text-decoration: none; ">Users
					</a>

				</li>
				<li class="nav-item">
					<a href="/admin/logout" class="m-2" style="text-decoration: none;">logout</a>
				</li>
			</ul>
		</div>
	</nav>

	<div class="mx-5 d-flex ">
		<div class="mt-3">
			<h2>EDIT PRODUCT</h2>
			<a href="/admin/products" style="text-decoration: none;">&#x2190; go back</a>
		</div>
	</div>
	<div class="ms-5 d-flex justify-content-center">
		<div class="mx-3 col-md-5 border rounded  bg-dark text-white">

			<!-- basic details -->
			<div class="mx-3">
				<!-- form -->
				<div class="form-group my-2">
					<h3>Existing Images: </h3>
					<div class="d-flex flex-wrap">
						<% product.images.forEach((image, index)=> { %>
							<div class="m-2 position-relative" id="img<%= index %>">
								<button class="btn position-absolute start-0 top-0 delete-image-button"
									data-imageurl="<%= image.url %>"><i class="bi bi-trash"></i></button>
								<img src="/products/<%= product.brand+' '+product.model %>/<%= image.url %>"
									alt="Product Image" width="70">
							</div>
							<% }) %>
					</div>
				</div>
				<script>
					document.addEventListener('DOMContentLoaded', function () {
						const deleteButtons = document.querySelectorAll('.delete-image-button');

						deleteButtons.forEach(button => {
							button.addEventListener('click', function (event) {
								const imgURL = this.dataset.imageurl;
								console.log(imgURL);
								const imgContainerId = event.currentTarget.parentNode.id
								const imgContainer = document.getElementById(imgContainerId);

								Swal.fire({
									title: 'Are you sure?',
									text: 'You are about to delete this image!',
									icon: 'warning',
									showCancelButton: true,
									confirmButtonColor: '#d33',
									cancelButtonColor: '#3085d6',
									confirmButtonText: 'Yes, delete it!'
								}).then((result) => {
									if (result.isConfirmed) {
										fetch(`/admin/editProduct/deleteimg/${imgURL}`, {
											method: 'DELETE',
											headers: {
												'Content-Type': 'application/json',
											},
										})
											.then(response => response.json())
											.then(data => {
												if (data.success) {
													Toastify({
														text: data.message,
														backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
														duration: 3000,
														close: true,
														gravity: 'top',
														position: 'center',
													}).showToast();
													imgContainer.remove();
												} else {
													Swal.fire({
														title: 'Error',
														text: data.message,
														icon: 'error',
													});
												}
											})
											.catch(error => {
												console.error('Error:', error);
											});
									}
								});
							});
						});
					});
				</script>

				<form id="addImages" action="/admin/editproduct/addimages" enctype="multipart/form-data" method="post">
					<div class="form-group mb-3">
						<label for="productImage">New Image's: </label>
						<input type="file" class="form-control-file" accept="image/*" name="images" id="productImages"
							multiple required>
						<button type="submit" class="btn btn-sm px-5 btn-primary my-3">Add</button>
					</div>
				</form>
				<script>
					document.addEventListener('DOMContentLoaded', function () {
						const addForm = document.getElementById('addImages');

						addForm.addEventListener('submit', async function (event) {
							event.preventDefault();

							try {
								const response = await fetch(this.action, {
									method: this.method,
									body: new FormData(this),
								});

								const data = await response.json();

								if (data.success) {
									Toastify({
										text: data.message,
										backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
										duration: 2000,
										close: true,
										gravity: 'top',
										position: 'center',
									}).showToast();

									setTimeout(() => {
										window.location.reload();
									}, 2000);
								} else {
									Toastify({
										text: data.message,
										backgroundColor: 'linear-gradient(to right, #FF4B2B, #FF416C)',
										duration: 3000,
										close: true,
										gravity: 'top',
										position: 'center',
									}).showToast();
									console.error(data.message);
								}
							} catch (error) {
								console.error("Error:", error.message);
							}
						});
					});
				</script>

				</script>
				<form action="/admin/editProduct" id="productForm">
					<div class="row">
						<div class="form-group my-3 col-md-6">
							<label for="Brand">Brand <small class="ms-1 text-danger" id="B"></small></label>
							<input type="text" class="form-control form-control-sm" id="brand" name="brand"
								value="<%= product.brand %>">
						</div>
						<div class="form-group my-3 col-md-6">
							<label for="model">Model<small class="ms-1 text-danger" id="M"></small></label>
							<input type="text" pattern="^[A-Za-z0-9\s\-]+$" class="form-control form-control-sm"
								value="<%= product.model %>" id="model" name="model" >
						</div>
					</div>
					<div class="form-group my-3">
						<label for="specification">Specification<small class="ms-1 text-danger" id="S"></small></label>
						<textarea class="form-control form-control-sm" id="specification" name="specification" rows="3"
							required><%= product.specification %></textarea>
					</div>

					<div class="row">
						<div class="form-group my-3 col-md-6">
							<label for="category">Category<small class="ms-1 text-danger" id="C"></small></label>
							<select class="form-select form-control-sm" id="category" name="category" >
								<% categories.forEach((category)=>{ %>
									<% if(product.category===category.category){ %>
										<option selected value='<%= category._id %>'>
											<%= category.category %>
										</option>
										<% }else{ %>
											<option value='<%= category._id %>'>
												<%= category.category %>
											</option>
										<% } %>
									<% }) %>
							</select>
						</div>
						<div class="form-group my-3 col-md-6 d-flex align-items-end">
							<button class="btn btn-sm btn-primary px-5">Update basic details</button>
						</div>
					</div>
				</form>
			</div>
		</div>
		<script>
			function validate() {
				let brand = document.getElementById('brand').value;
				let model = document.getElementById('model').value;
				let category = document.getElementById('category').value;
				let specification = document.getElementById('specification').value;

				const regex = /^[a-zA-Z0-9\s]+$/;

				let OK = true;

				let brandError = document.getElementById("B");
				let modelError = document.getElementById("M");
				let categoryError = document.getElementById("C");
				let specificError = document.getElementById("S");

				brandError.textContent = "";
				modelError.textContent = "";
				categoryError.textContent = "";
				specificError.textContent = "";

				if (brand.length < 2 || !regex.test(brand)) {
					brandError.textContent = "Min 2 chars, No special symbols";
					OK = false;
				}

				if (model.length < 3 || !regex.test(model)) {
					modelError.textContent = "Min 3 chars, No special symbols";
					OK = false;
				}

				if (category === '') {
					categoryError.textContent = "Please select a category";
					OK = false;
				}

				if (specification.length < 10) {
					specificError.textContent = "Min 10 characters";
					OK = false;
				}

				console.log("broooo", OK)
				return OK;
			}

			const productForm = document.getElementById("productForm");
			productForm.addEventListener("submit",(event)=>{
				event.preventDefault()
				
				if (validate()) {
					
					(async function updateDetails(){
						const formData = new FormData(productForm);

						try {
							const response = await fetch("/admin/editproduct", {
								method: "PUT",
								body: formData
							})

							if (!response.ok) {
								throw new Error("Couldn't update details");
							} else {
								const data = await response.json();

								if (data.success) {
									Toastify({
										text: data.message,
										duration: 1700,
										gravity: "top",
										position: "center",
										stopOnFocus: true,
										offset:{
											y:25
										},
										style:{
											background: "linear-gradient(to right, #228B22, #4CAF50)",
										}
									}).showToast();

									setTimeout(() => {
										window.location.reload();
									}, 1700);
								} else {
									throw new Error(data.message)
								}
							}

						} catch (error) {

							console.log(error.message);
							Toastify({
								text: error.message,
								duration: 1700,
								gravity: "top",
								position: "center",
								backgroundColor: "#ff0000",
								stopOnFocus: true,
								offset:{
									y:25
								}
							}).showToast();
						}

					})();
				}
			})
		</script>

		<!-- variant -->
		<div class="container me-5 border rounded bg-dark text-white" id="rightDiv"
			style="overflow:auto;min-height: 500px; overflow-x: hidden;">
			<div class="d-flex my-2 border rounded" id="imagePreview" style="height: 110px;">
				<!-- here goes the images -->
				<!-- here goes the images -->
				<!-- here goes the images -->
			</div>
			<div class="">
				<div class="d-flex justify-content-between align-items-center">
					<H1 class="">Variants</H1>
					<div>
						<button class="btn btn-danger" type="submit" form="variantForm" id="update">Update</button>
						<button type="button" class="btn btn-info" data-bs-toggle="modal"
							data-bs-target="#addVariantModal">Add variant</button>
					</div>
				</div>

				<form id="variantForm">
					<div class="col-md-12 d-flex flex-wrap">
						<% product.variants.forEach((variant)=> { %>
							<div class="variant col-md-3 m-3 rounded border align-items-center">
								<div class="d-flex mx-1 justify-content-between">
									<h3 class="ms-2 align-self-center">
										<%= variant.v_name %>
									</h3>
									<small class="ms-2 align-self-end text-warning">current stock :</small>
									<h4 class="text-secondary align-self-end m-0">
										<%= variant.stock %>
									</h4>
								</div>
								<input type="color" value="<%= variant.color %>" required
									class="form-control form-control-sm input<%= variant.v_name %>"
									name="color<%= variant.v_name %>">
								<input type="number" value="" placeholder="add stock" title="Add Stock"
									class="form-control form-control-sm input<%= variant.v_name %>" placeholder="Stock"
									name="stock<%= variant.v_name %>">
								<input type="number" value="<%= variant.price %>" title="Price" required
									class="form-control form-control-sm input<%= variant.v_name %>" placeholder="Price"
									name="price<%= variant.v_name %>">
							</div>
							<% }) %>
								<% let productVar=JSON.stringify(product.variants) %>
					</div>
				</form>
				<script>
					let variantForm = document.getElementById("variantForm");
					let update = document.getElementById("update");
					let productVariants = JSON.parse('<%- productVar %>')

					function isVariantChanged(variant) {
						const variantInputs = document.querySelectorAll(`.input${variant.v_name}`);
						return Array.from(variantInputs).some(input => input.value !== input.defaultValue);
					}

					variantForm.addEventListener("submit", (event) => {
						event.preventDefault();

						let changedVariants = [];
						for (const variant of productVariants) {
							if (isVariantChanged(variant)) {
								changedVariants.push(variant.v_name)
							}
						}
						if (changedVariants.length === 0) {
							Toastify({
								text: "No updates were made",
								duration: 1300,
								gravity: "top",
								position: "center",
								backgroundColor: "#ff0000",
								stopOnFocus: true,
								offset: {
									y: 20
								}
							}).showToast();
							return
						};
						const formData = new FormData(variantForm)
						formData.append("changedVariants", JSON.stringify(changedVariants));

						const urlSearchParams = new URLSearchParams(formData);
						const formBody = urlSearchParams.toString();

						fetch("/admin/updatevariants", {
							method: "PUT",
							headers: {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							body: formBody,
						})
							.then(response => {
								if (response.ok) {
									return response.json();
								} else {
									throw new Error("Failed to update variants");
								}
							})
							.then(data => {
								if (data.success) {
									Toastify({
										text: data.message,
										duration: 2000,
										gravity: "top",
										position: "center",
										backgroundColor: "#03c03c",
										stopOnFocus: true,
										offset: {
											y: 20
										}
									}).showToast();
									setTimeout(() => {
										window.location.reload();
									}, 2000);
								}
							})
							.catch(error => {
								Toastify({
									text: error.message,
									duration: 2000,
									gravity: "top",
									position: "center",
									backgroundColor: "#ff0000",
									stopOnFocus: true
								}).showToast();
								console.error('Fetch error:', error.message);
							});
					})
				</script>
			</div>
		</div>
		<script>
			const imgPreview = document.getElementById('imagePreview');
			const inputField = document.getElementById('productImages');

			inputField.addEventListener('change', function (event) {
				const files = event.target.files;
				imgPreview.innerHTML = ''; // Clear the previous preview images

				for (let i = 0; i < files.length; i++) {
					const file = files[i];
					const reader = new FileReader();

					reader.onload = function (e) {
						const img = document.createElement('img');
						img.src = e.target.result;
						img.style.maxWidth = '80px'; // Set max width for the preview image
						img.style.margin = '5px'; // Set max width for the preview image

						const deleteBtn = document.createElement('button');
						deleteBtn.innerText = 'X';
						deleteBtn.style.borderRadius = '100%'; // Makes the button round
						deleteBtn.style.backgroundColor = 'black'; // Sets the background color to red
						deleteBtn.style.color = 'white'; // Sets the text color to white
						deleteBtn.style.border = 'none'; // Removes the button border
						deleteBtn.style.padding = '5px 10px'; // Adjusts padding for better appearance
						deleteBtn.style.marginBlockEnd = '5px'; // Adjusts padding for better appearance

						deleteBtn.addEventListener('click', function () {
							img.parentNode.removeChild(img); // Remove the image element
							deleteBtn.parentNode.removeChild(deleteBtn);
							removeAndReconstructInput(file); // Remove the file and reconstruct the input field
						});

						const container = document.createElement('div');
						container.appendChild(img);
						container.appendChild(deleteBtn);
						imgPreview.appendChild(container); // Append the new image preview with delete button
					};

					reader.readAsDataURL(file);
				}
			});

			function removeAndReconstructInput(fileToRemove) {
				const index = Array.from(inputField.files).findIndex(file => file === fileToRemove);
				if (index !== -1) {
					removeFileFromFileList(index); // Call the removeFileFromFileList function passing the index
				}
			}

			function removeFileFromFileList(index) {
				const dt = new DataTransfer();
				const files = inputField.files;

				for (let i = 0; i < files.length; i++) {
					if (index !== i) {
						const file = files[i];
						dt.items.add(file); // Exclude the file based on the provided index
					}
				}

				inputField.files = dt.files; // Assign the updated file list to the input field
			}
		</script>
	</div>
	<div class="modal fade" id="addVariantModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
		aria-labelledby="staticBackdropLabel" aria-hidden="true" data-bs-theme="dark">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5 text-white" id="staticBackdropLabel">Add variant</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<form id="addVariant">
					<div class="modal-body d-flex align-content-center justify-content-between">
						<input type="color" value="#466afb" required name="newcolor">
						<input type="number" value="" placeholder="stock" title="Add Stock" required name="newstock">
						<input type="number" value="" title="Price" required placeholder="price" name="newprice">
					</div>
					<div class="modal-footer">
						<button type="submit" class="btn btn-dark">Add</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<script>
		let newForm = document.getElementById("addVariant");

		newForm.addEventListener("submit", (event) => {
			event.preventDefault();

			fetch("/admin/editproduct/addvariant", {
				method: "POST",
				body: new FormData(newForm),
			})
				.then(response => {
					if (response.ok) {
						return response.json();
					} else {
						throw new Error("Failed to add variant!");
					}
				})
				.then(data => {
					if (data.success) {
						Toastify({
							text: data.message,
							duration: 2000,
							gravity: "top",
							position: "center",
							backgroundColor: "#03c03c",
							stopOnFocus: true,
							offset: {
								y: 20
							}
						}).showToast();
						setTimeout(() => {
							window.location.reload();
						}, 2000);
					}
				})
				.catch(error => {
					Toastify({
						text: error.message,
						duration: 2000,
						gravity: "top",
						position: "center",
						backgroundColor: "#ff0000",
						stopOnFocus: true
					}).showToast();
					console.error('Fetch error:', error.message);
				});
		})	
	</script>
</body>

</html>